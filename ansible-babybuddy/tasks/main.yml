---
- name: 'Check mandatory variables are defined'
  assert:
    that:
      - application_name is defined
      - docker_network_name is defined
      - loki_url is defined
      - babybuddy_config_path is defined
      - uid is defined
      - gid is defined
      - url is defined
      - host_port is defined
      - username_header is defined
      - database_container_name is defined
      - database_user is defined
      - database_password is defined
      - database_name is defined

- name: Create the dockernetwork
  docker_network:
    name: "{{ docker_network_name }}"

- name: Create app container
  docker_container:
    name: "{{ application_name }}"
    image: "lscr.io/linuxserver/babybuddy:2.2.1"
    restart_policy: "always"
    cleanup: true
    pull: true
    log_driver: "loki"
    log_options:
      loki-url: "{{ loki_url }}"
      loki-batch-size: "400"
    published_ports:
      - "0.0.0.0:{{ host_port }}:8000"
    networks:
      - name: "{{ docker_network_name }}"
      - name: "immich_network" # temp
    volumes:
      - "{{ hostvars[inventory_hostname].working_directory }}babybuddy:/config"
    env:
      TZ: "Europe/Madrid"
      PUID: "{{ uid }}"
      PGID: "{{ gid }}"
      CSRF_TURSTED_ORIGINS: "http://127.0.0.1:8000,{{ url }}"
      SECURE_PROXY_SSL_HEADER: "True"
      REVERSE_PROXY_AUTH: "True"
      PROXY_HEADER: "{{ username_header }}"
      DB_ENGINE: "django.db.backends.postgresql"
      DB_HOST: "{{ database_container_name }}"
      DB_NAME: "{{ database_name }}"
      DB_PASSWORD: "{{ database_password }}"
      DB_USER: "{{ database_user }}"

# Restart the container so the configuration changes are picked up
- name: Restart babybuddy
  command: docker restart babybuddy
  register: restart_babybuddy_result
  changed_when: restart_babybuddy_result.rc != 0

- name: Create database
  include_role:
    name: ansible-postgres
    tasks_from: create-postgres-database-if-not-exists

- name: Setup database backups
  include_role:
    name: ansible-backups
    tasks_from: setup-postgres-database-backups

- name: Setup S3 backups
  include_role:
    name: ansible-backups
    tasks_from: setup-s3-backups

- name: Setup restic backups
  include_role:
    name: ansible-backups
    tasks_from: setup-restic-backups
  vars:
    file_path: "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/media"
