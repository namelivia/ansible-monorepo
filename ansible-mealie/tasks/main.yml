---
- name: 'Check mandatory variables are defined'
  assert:
    that:
      - application_name is defined
      - docker_network_name is defined
      - loki_url is defined
      - jwt_auth_jwk_set_url is defined
      - log_level is defined
      - host_port is defined

- name: Create the dockernetwork
  docker_network:
    name: "{{ docker_network_name }}"

- name: Create the files directory
  file:
    path: "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/files"
    state: directory
    mode: "0700"

- name: Create the data directory
  file:
    path: "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/files/data"
    state: directory
    mode: "0755"

- name: Create frontend container
  docker_container:
    name: "{{ application_name }}-frontend"
    image: "namelivia/mealie:frontend-nightly"
    restart_policy: "always"
    cleanup: true
    pull: true
    log_driver: "loki"
    log_options:
      loki-url: "{{ loki_url }}"
      loki-batch-size: "400"
    networks:
      - name: "{{ docker_network_name }}"
    volumes:
      - "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/files/data:/app/data"
    exposed_ports:
      - "3000"
    published_ports:
      - "0.0.0.0:{{ host_port }}:3000"
    env:
      API_URL: "http://mealie-backend:9000"

- name: Create backend container
  docker_container:
    name: "{{ application_name }}-backend"
    image: "namelivia/mealie:api-nightly"
    restart_policy: "always"
    cleanup: true
    pull: true
    log_driver: "loki"
    log_options:
      loki-url: "{{ loki_url }}"
      loki-batch-size: "400"
    networks:
      - name: "{{ docker_network_name }}"
    volumes:
      - "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/files/data:/app/data"
    exposed_ports:
      - "9000"
    env:
      ALLOW_SIGNUP: "false"
      JWT_AUTH_ENABLED: "true"
      JWT_AUTH_HEADER_NAME: "X-Pomerium-Jwt-Assertion"
      JWT_AUTH_EMAIL_CLAIM: "email"
      JWT_AUTH_NAME_CLAIM: "name"
      JWT_AUTH_USERNAME_CLAIM: "user"
      JWT_AUTH_AUTO_SIGN_UP: "true"
      JWT_AUTH_JWK_SET_URL: "{{ jwt_auth_jwk_set_url }}"
      DB_ENGINE: "sqlite"
      WORKERS_PER_CORE: "1"
      MAX_WORKERS: "1"
      WEB_CONCURRENCY: "1"
      LOG_LEVEL: "{{ log_level }}"

- name: Setup file backups
  include_role:
    name: ansible-backups
    tasks_from: setup-file-backups

- name: Setup S3 backups
  include_role:
    name: ansible-backups
    tasks_from: setup-s3-backups

- name: Setup restic backups
  include_role:
    name: ansible-backups
    tasks_from: setup-restic-backups
  vars:
    file_path: "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/files"
