---
- name: 'Check mandatory variables are defined'
  assert:
    that:
      - application_name is defined
      - docker_network_name is defined
      - loki_url is defined
      - host_port is defined
      - database_container_name is defined
      - database_user is defined
      - database_password is defined
      - database_name is defined
      - app_key is defined
      - database_network_name is defined

- name: Create the dockernetwork
  community.docker.docker_network:
    name: "{{ docker_network_name }}"

- name: Create the files directory
  file:
    path: "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/files"
    state: directory
    mode: "0755"

- name: Create the upload directory
  file:
    path: "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/files/upload"
    state: directory
    mode: "0755"

- name: Create the data directory
  file:
    path: "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/files/data"
    state: directory
    mode: "0755"

- name: Create app container
  community.docker.docker_container:
    name: "{{ application_name }}"
    image: "fireflyiii/core:version-6.1.25"
    restart_policy: "always"
    cleanup: true
    pull: true
    log_driver: "loki"
    log_options:
      loki-url: "{{ loki_url }}"
      loki-batch-size: "400"
    published_ports:
      - "0.0.0.0:{{ host_port }}:8080"
    networks:
      - name: "{{ docker_network_name }}"
      - name: "{{ database_network_name }}"
    volumes:
      - "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/files/upload:/var/www/html/storage/upload"
    env:
      APP_KEY: "{{ app_key }}"
      DB_CONNECTION: "pgsql"
      DB_HOST: "{{ database_container_name }}"
      DB_PORT: "5432"
      DB_DATABASE: "{{ database_name }}"
      DB_USERNAME: "{{ database_user }}"
      DB_PASSWORD: "{{ database_password }}"
      TZ: "Europe/Madrid"
      TRUSTED_PROXIES: "*"

# Restart the container so the configuration changes are picked up
- name: Restart firefly
  command: docker restart firefly
  register: restart_firefly_result
  changed_when: restart_firefly_result.rc != 0

- name: Create database
  include_role:
    name: ansible-postgres
    tasks_from: create-postgres-database-if-not-exists

- name: Setup database backups
  include_role:
    name: ansible-backups
    tasks_from: setup-postgres-database-backups

- name: Setup S3 backups
  include_role:
    name: ansible-backups
    tasks_from: setup-s3-backups

- name: Migrate
  command: docker exec {{ application_name }} php artisan migrate --seed --force
  register: result
  changed_when: result.rc != 0

- name: Upgrade
  command: docker exec {{ application_name }} php artisan firefly-iii:upgrade-database
  register: result
  changed_when: result.rc != 0


- name: Setup restic backups
  include_role:
    name: ansible-backups
    tasks_from: setup-restic-backups
  vars:
    file_path: "{{ hostvars[inventory_hostname].working_directory }}{{ application_name }}/files"
