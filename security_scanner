# Loop through each image and scan it
grep -R 'image:' **/**/tasks/main.yml | sort | uniq | while read -r line; do
  image=$(echo "$line" | sed -n 's/.*image: "\(.*\)"/\1/p' | sed 's/ //g')

  # Add validation for the image variable
  # This regex checks for a valid image format (e.g., 'repo/image:tag')
  if [[ "$image" =~ ^[a-z0-9\._\-]+([\/][a-z0-9\._\-]+)*(:[a-z0-9\._\-]+)?$ ]]; then

    if [[ -n "$image" && ! "$line" =~ "# ignore-updates" ]]; then
      echo "---------------------------------------------------"
      echo "Scanning image: $image"
      echo "---------------------------------------------------"

      # Determine the parent directory of the 'tasks' folder
      parent_dir=$(echo "$line" | sed 's|/tasks/main.yml.*||')

      # Ensure the parent directory exists
      mkdir -p "$parent_dir"

      # Define the output file name based on the parent directory and image name
      output_file="$parent_dir/security_report.json"

      docker run --rm \
        -v trivy-cache-db:/root/.cache/trivy \
        -v /var/run/docker.sock:/var/run/docker.sock \
        aquasec/trivy image \
        --scanners vuln \
        --ignore-unfixed \
        --severity=HIGH,CRITICAL \
        --format json \
        "$image" > "$output_file"
    fi
  else
    echo "Skipping invalid image name: $image"
  fi
done
